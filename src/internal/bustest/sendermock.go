// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package bustest

import (
	"context"
	"github.com/jmalloc/ax/src/ax/bus"
	"sync"
)

var (
	lockMessageSenderMockSendMessage sync.RWMutex
)

// MessageSenderMock is a mock implementation of MessageSender.
//
//     func TestSomethingThatUsesMessageSender(t *testing.T) {
//
//         // make and configure a mocked MessageSender
//         mockedMessageSender := &MessageSenderMock{
//             SendMessageFunc: func(ctx context.Context, m bus.OutboundEnvelope) error {
// 	               panic("TODO: mock out the SendMessage method")
//             },
//         }
//
//         // TODO: use mockedMessageSender in code that requires MessageSender
//         //       and then make assertions.
//
//     }
type MessageSenderMock struct {
	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(ctx context.Context, m bus.OutboundEnvelope) error

	// calls tracks calls to the methods.
	calls struct {
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M bus.OutboundEnvelope
		}
	}
}

// SendMessage calls SendMessageFunc.
func (mock *MessageSenderMock) SendMessage(ctx context.Context, m bus.OutboundEnvelope) error {
	if mock.SendMessageFunc == nil {
		panic("moq: MessageSenderMock.SendMessageFunc is nil but MessageSender.SendMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   bus.OutboundEnvelope
	}{
		Ctx: ctx,
		M:   m,
	}
	lockMessageSenderMockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	lockMessageSenderMockSendMessage.Unlock()
	return mock.SendMessageFunc(ctx, m)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//     len(mockedMessageSender.SendMessageCalls())
func (mock *MessageSenderMock) SendMessageCalls() []struct {
	Ctx context.Context
	M   bus.OutboundEnvelope
} {
	var calls []struct {
		Ctx context.Context
		M   bus.OutboundEnvelope
	}
	lockMessageSenderMockSendMessage.RLock()
	calls = mock.calls.SendMessage
	lockMessageSenderMockSendMessage.RUnlock()
	return calls
}
