// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package bustest

import (
	"context"
	"github.com/jmalloc/ax/src/ax"
	"github.com/jmalloc/ax/src/ax/bus"
	"sync"
)

var (
	lockTransportMockAccept     sync.RWMutex
	lockTransportMockInitialize sync.RWMutex
	lockTransportMockProduce    sync.RWMutex
	lockTransportMockSubscribe  sync.RWMutex
)

// TransportMock is a mock implementation of Transport.
//
//     func TestSomethingThatUsesTransport(t *testing.T) {
//
//         // make and configure a mocked Transport
//         mockedTransport := &TransportMock{
//             AcceptFunc: func(ctx context.Context, env bus.OutboundEnvelope) error {
// 	               panic("TODO: mock out the Accept method")
//             },
//             InitializeFunc: func(ctx context.Context, ep string) error {
// 	               panic("TODO: mock out the Initialize method")
//             },
//             ProduceFunc: func(ctx context.Context) (bus.InboundEnvelope, error) {
// 	               panic("TODO: mock out the Produce method")
//             },
//             SubscribeFunc: func(ctx context.Context, mt ax.MessageTypeSet) error {
// 	               panic("TODO: mock out the Subscribe method")
//             },
//         }
//
//         // TODO: use mockedTransport in code that requires Transport
//         //       and then make assertions.
//
//     }
type TransportMock struct {
	// AcceptFunc mocks the Accept method.
	AcceptFunc func(ctx context.Context, env bus.OutboundEnvelope) error

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func(ctx context.Context, ep string) error

	// ProduceFunc mocks the Produce method.
	ProduceFunc func(ctx context.Context) (bus.InboundEnvelope, error)

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, mt ax.MessageTypeSet) error

	// calls tracks calls to the methods.
	calls struct {
		// Accept holds details about calls to the Accept method.
		Accept []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Env is the env argument value.
			Env bus.OutboundEnvelope
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ep is the ep argument value.
			Ep string
		}
		// Produce holds details about calls to the Produce method.
		Produce []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Mt is the mt argument value.
			Mt ax.MessageTypeSet
		}
	}
}

// Accept calls AcceptFunc.
func (mock *TransportMock) Accept(ctx context.Context, env bus.OutboundEnvelope) error {
	if mock.AcceptFunc == nil {
		panic("moq: TransportMock.AcceptFunc is nil but Transport.Accept was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Env bus.OutboundEnvelope
	}{
		Ctx: ctx,
		Env: env,
	}
	lockTransportMockAccept.Lock()
	mock.calls.Accept = append(mock.calls.Accept, callInfo)
	lockTransportMockAccept.Unlock()
	return mock.AcceptFunc(ctx, env)
}

// AcceptCalls gets all the calls that were made to Accept.
// Check the length with:
//     len(mockedTransport.AcceptCalls())
func (mock *TransportMock) AcceptCalls() []struct {
	Ctx context.Context
	Env bus.OutboundEnvelope
} {
	var calls []struct {
		Ctx context.Context
		Env bus.OutboundEnvelope
	}
	lockTransportMockAccept.RLock()
	calls = mock.calls.Accept
	lockTransportMockAccept.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *TransportMock) Initialize(ctx context.Context, ep string) error {
	if mock.InitializeFunc == nil {
		panic("moq: TransportMock.InitializeFunc is nil but Transport.Initialize was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ep  string
	}{
		Ctx: ctx,
		Ep:  ep,
	}
	lockTransportMockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	lockTransportMockInitialize.Unlock()
	return mock.InitializeFunc(ctx, ep)
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//     len(mockedTransport.InitializeCalls())
func (mock *TransportMock) InitializeCalls() []struct {
	Ctx context.Context
	Ep  string
} {
	var calls []struct {
		Ctx context.Context
		Ep  string
	}
	lockTransportMockInitialize.RLock()
	calls = mock.calls.Initialize
	lockTransportMockInitialize.RUnlock()
	return calls
}

// Produce calls ProduceFunc.
func (mock *TransportMock) Produce(ctx context.Context) (bus.InboundEnvelope, error) {
	if mock.ProduceFunc == nil {
		panic("moq: TransportMock.ProduceFunc is nil but Transport.Produce was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockTransportMockProduce.Lock()
	mock.calls.Produce = append(mock.calls.Produce, callInfo)
	lockTransportMockProduce.Unlock()
	return mock.ProduceFunc(ctx)
}

// ProduceCalls gets all the calls that were made to Produce.
// Check the length with:
//     len(mockedTransport.ProduceCalls())
func (mock *TransportMock) ProduceCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockTransportMockProduce.RLock()
	calls = mock.calls.Produce
	lockTransportMockProduce.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *TransportMock) Subscribe(ctx context.Context, mt ax.MessageTypeSet) error {
	if mock.SubscribeFunc == nil {
		panic("moq: TransportMock.SubscribeFunc is nil but Transport.Subscribe was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Mt  ax.MessageTypeSet
	}{
		Ctx: ctx,
		Mt:  mt,
	}
	lockTransportMockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	lockTransportMockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, mt)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedTransport.SubscribeCalls())
func (mock *TransportMock) SubscribeCalls() []struct {
	Ctx context.Context
	Mt  ax.MessageTypeSet
} {
	var calls []struct {
		Ctx context.Context
		Mt  ax.MessageTypeSet
	}
	lockTransportMockSubscribe.RLock()
	calls = mock.calls.Subscribe
	lockTransportMockSubscribe.RUnlock()
	return calls
}
