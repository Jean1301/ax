// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package bustest

import (
	"context"
	"github.com/jmalloc/ax/src/ax"
	"github.com/jmalloc/ax/src/ax/bus"
	"sync"
)

var (
	lockTransportMockInitialize     sync.RWMutex
	lockTransportMockReceiveMessage sync.RWMutex
	lockTransportMockSendMessage    sync.RWMutex
	lockTransportMockSubscribe      sync.RWMutex
)

// TransportMock is a mock implementation of Transport.
//
//     func TestSomethingThatUsesTransport(t *testing.T) {
//
//         // make and configure a mocked Transport
//         mockedTransport := &TransportMock{
//             InitializeFunc: func(ctx context.Context, ep string) error {
// 	               panic("TODO: mock out the Initialize method")
//             },
//             ReceiveMessageFunc: func(ctx context.Context) (bus.InboundEnvelope, error) {
// 	               panic("TODO: mock out the ReceiveMessage method")
//             },
//             SendMessageFunc: func(ctx context.Context, m bus.OutboundEnvelope) error {
// 	               panic("TODO: mock out the SendMessage method")
//             },
//             SubscribeFunc: func(ctx context.Context, mt ax.MessageTypeSet) error {
// 	               panic("TODO: mock out the Subscribe method")
//             },
//         }
//
//         // TODO: use mockedTransport in code that requires Transport
//         //       and then make assertions.
//
//     }
type TransportMock struct {
	// InitializeFunc mocks the Initialize method.
	InitializeFunc func(ctx context.Context, ep string) error

	// ReceiveMessageFunc mocks the ReceiveMessage method.
	ReceiveMessageFunc func(ctx context.Context) (bus.InboundEnvelope, error)

	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(ctx context.Context, m bus.OutboundEnvelope) error

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, mt ax.MessageTypeSet) error

	// calls tracks calls to the methods.
	calls struct {
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ep is the ep argument value.
			Ep string
		}
		// ReceiveMessage holds details about calls to the ReceiveMessage method.
		ReceiveMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M bus.OutboundEnvelope
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Mt is the mt argument value.
			Mt ax.MessageTypeSet
		}
	}
}

// Initialize calls InitializeFunc.
func (mock *TransportMock) Initialize(ctx context.Context, ep string) error {
	if mock.InitializeFunc == nil {
		panic("moq: TransportMock.InitializeFunc is nil but Transport.Initialize was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ep  string
	}{
		Ctx: ctx,
		Ep:  ep,
	}
	lockTransportMockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	lockTransportMockInitialize.Unlock()
	return mock.InitializeFunc(ctx, ep)
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//     len(mockedTransport.InitializeCalls())
func (mock *TransportMock) InitializeCalls() []struct {
	Ctx context.Context
	Ep  string
} {
	var calls []struct {
		Ctx context.Context
		Ep  string
	}
	lockTransportMockInitialize.RLock()
	calls = mock.calls.Initialize
	lockTransportMockInitialize.RUnlock()
	return calls
}

// ReceiveMessage calls ReceiveMessageFunc.
func (mock *TransportMock) ReceiveMessage(ctx context.Context) (bus.InboundEnvelope, error) {
	if mock.ReceiveMessageFunc == nil {
		panic("moq: TransportMock.ReceiveMessageFunc is nil but Transport.ReceiveMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockTransportMockReceiveMessage.Lock()
	mock.calls.ReceiveMessage = append(mock.calls.ReceiveMessage, callInfo)
	lockTransportMockReceiveMessage.Unlock()
	return mock.ReceiveMessageFunc(ctx)
}

// ReceiveMessageCalls gets all the calls that were made to ReceiveMessage.
// Check the length with:
//     len(mockedTransport.ReceiveMessageCalls())
func (mock *TransportMock) ReceiveMessageCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockTransportMockReceiveMessage.RLock()
	calls = mock.calls.ReceiveMessage
	lockTransportMockReceiveMessage.RUnlock()
	return calls
}

// SendMessage calls SendMessageFunc.
func (mock *TransportMock) SendMessage(ctx context.Context, m bus.OutboundEnvelope) error {
	if mock.SendMessageFunc == nil {
		panic("moq: TransportMock.SendMessageFunc is nil but Transport.SendMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   bus.OutboundEnvelope
	}{
		Ctx: ctx,
		M:   m,
	}
	lockTransportMockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	lockTransportMockSendMessage.Unlock()
	return mock.SendMessageFunc(ctx, m)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//     len(mockedTransport.SendMessageCalls())
func (mock *TransportMock) SendMessageCalls() []struct {
	Ctx context.Context
	M   bus.OutboundEnvelope
} {
	var calls []struct {
		Ctx context.Context
		M   bus.OutboundEnvelope
	}
	lockTransportMockSendMessage.RLock()
	calls = mock.calls.SendMessage
	lockTransportMockSendMessage.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *TransportMock) Subscribe(ctx context.Context, mt ax.MessageTypeSet) error {
	if mock.SubscribeFunc == nil {
		panic("moq: TransportMock.SubscribeFunc is nil but Transport.Subscribe was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Mt  ax.MessageTypeSet
	}{
		Ctx: ctx,
		Mt:  mt,
	}
	lockTransportMockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	lockTransportMockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, mt)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedTransport.SubscribeCalls())
func (mock *TransportMock) SubscribeCalls() []struct {
	Ctx context.Context
	Mt  ax.MessageTypeSet
} {
	var calls []struct {
		Ctx context.Context
		Mt  ax.MessageTypeSet
	}
	lockTransportMockSubscribe.RLock()
	calls = mock.calls.Subscribe
	lockTransportMockSubscribe.RUnlock()
	return calls
}
