// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package persistencetest

import (
	"context"
	"sync"

	"github.com/jmalloc/ax/src/ax/persistence"
)

var (
	lockDataStoreMockBeginTx sync.RWMutex
)

// DataStoreMock is a mock implementation of DataStore.
//
//     func TestSomethingThatUsesDataStore(t *testing.T) {
//
//         // make and configure a mocked DataStore
//         mockedDataStore := &DataStoreMock{
//             BeginTxFunc: func(ctx context.Context) (persistence.Tx, persistence.Committer, error) {
// 	               panic("TODO: mock out the BeginTx method")
//             },
//         }
//
//         // TODO: use mockedDataStore in code that requires DataStore
//         //       and then make assertions.
//
//     }
type DataStoreMock struct {
	// BeginTxFunc mocks the BeginTx method.
	BeginTxFunc func(ctx context.Context) (persistence.Tx, persistence.Committer, error)

	// calls tracks calls to the methods.
	calls struct {
		// BeginTx holds details about calls to the BeginTx method.
		BeginTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// BeginTx calls BeginTxFunc.
func (mock *DataStoreMock) BeginTx(ctx context.Context) (persistence.Tx, persistence.Committer, error) {
	if mock.BeginTxFunc == nil {
		panic("moq: DataStoreMock.BeginTxFunc is nil but DataStore.BeginTx was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockDataStoreMockBeginTx.Lock()
	mock.calls.BeginTx = append(mock.calls.BeginTx, callInfo)
	lockDataStoreMockBeginTx.Unlock()
	return mock.BeginTxFunc(ctx)
}

// BeginTxCalls gets all the calls that were made to BeginTx.
// Check the length with:
//     len(mockedDataStore.BeginTxCalls())
func (mock *DataStoreMock) BeginTxCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockDataStoreMockBeginTx.RLock()
	calls = mock.calls.BeginTx
	lockDataStoreMockBeginTx.RUnlock()
	return calls
}
